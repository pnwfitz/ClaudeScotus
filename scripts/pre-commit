#!/bin/bash
#
# ClaudeScotus Pre-commit Hook
# Enforces issue tag requirement in commit messages
# 
# Installation:
#   cp scripts/pre-commit .git/hooks/pre-commit
#   chmod +x .git/hooks/pre-commit
#
# Requirement: All commit messages must contain "#ISS-###" tag
#

# Read the commit message
commit_msg_file="$1"
commit_msg=$(cat "$commit_msg_file")

# Pattern to match: #ISS- followed by 3 digits
issue_pattern='#ISS-[0-9]{3}'

# Check if commit message contains valid issue tag
if ! echo "$commit_msg" | grep -qE "$issue_pattern"; then
    echo "‚ùå COMMIT REJECTED: Missing issue tag"
    echo ""
    echo "All commits must reference a valid issue using the format: #ISS-###"
    echo ""
    echo "Examples:"
    echo "  ‚úÖ Add pre-commit hook enforcement #ISS-002"
    echo "  ‚úÖ Implement Data Specialist memory triggers #ISS-001"
    echo "  ‚úÖ Draft MVP prediction scope document #ISS-003"
    echo ""
    echo "Current commit message:"
    echo "  $commit_msg"
    echo ""
    echo "Please:"
    echo "  1. Create an issue in /issues/ directory if one doesn't exist"
    echo "  2. Include the issue tag in your commit message"
    echo "  3. Try your commit again"
    echo ""
    echo "For more information, see: issues/README.md"
    exit 1
fi

# Special handling for merge commits
if echo "$commit_msg" | grep -q "^Merge"; then
    echo "‚úÖ Merge commit allowed"
    exit 0
fi

# Validate issue number format (must be 3 digits)
issue_number=$(echo "$commit_msg" | grep -oE '#ISS-[0-9]{3}' | head -1 | sed 's/#ISS-//')

if [ ${#issue_number} -ne 3 ]; then
    echo "‚ùå COMMIT REJECTED: Invalid issue number format"
    echo ""
    echo "Issue numbers must be exactly 3 digits (zero-padded)"
    echo "Examples: #ISS-001, #ISS-042, #ISS-123"
    echo "Invalid: #ISS-1, #ISS-42, #ISS-1234"
    echo ""
    exit 1
fi

# Check if referenced issue file exists
issue_file_pattern="issues/*_ISS-${issue_number}_*.md"
if ! ls $issue_file_pattern >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  WARNING: Issue file not found for #ISS-${issue_number}"
    echo "Expected pattern: issues/YYYY-MM-DD_ISS-${issue_number}_<slug>.md"
    echo ""
    echo "Continuing with commit, but please ensure issue exists..."
fi

echo "‚úÖ Issue tag validated: #ISS-${issue_number}"

# Additional formatting and style checks
echo "üîç Running formatting and style checks..."

# Check for trailing newlines in markdown files
echo "üìù Checking markdown files for trailing newlines..."
for file in $(git diff --cached --name-only --diff-filter=ACM | grep '\.md$'); do
    if [ -f "$file" ]; then
        if ! tail -c1 "$file" | read -r _ || [ "$(tail -c1 "$file")" ]; then
            echo "‚ùå Missing trailing newline in: $file"
            echo "Please add a trailing newline to the file"
            exit 1
        fi
    fi
done

# Validate wind-down template for wind-down files
echo "üå™Ô∏è Checking wind-down files for required template sections..."
for file in $(git diff --cached --name-only --diff-filter=ACM | grep '_wind_down\.md$'); do
    if [ -f "$file" ]; then
        required_sections=("Objectives Status" "Issues Created/Updated" "Next-Step Tickets" "Memory Paths Updated" "Context Handoff")
        
        for section in "${required_sections[@]}"; do
            if ! grep -q "## $section" "$file"; then
                echo "‚ùå Missing required section '$section' in wind-down file: $file"
                echo "Please ensure wind-down files follow the template in STYLE_GUIDE.md"
                exit 1
            fi
        done
    fi
done

# Run Python formatting checks if Python files are staged
python_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)
if [ -n "$python_files" ]; then
    echo "üêç Checking Python formatting with black and ruff..."
    if command -v black >/dev/null 2>&1; then
        if ! black --check --line-length 88 --target-version py311 $python_files; then
            echo "‚ùå Python files need formatting. Run: black --line-length 88 --target-version py311 ."
            exit 1
        fi
    fi
    
    if command -v ruff >/dev/null 2>&1; then
        if ! ruff check $python_files; then
            echo "‚ùå Python files have linting errors. Run: ruff check --fix ."
            exit 1
        fi
    fi
fi

# Run Bash formatting checks if shell scripts are staged
bash_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(sh|bash)$|^scripts/' || true)
if [ -n "$bash_files" ]; then
    echo "üêö Checking Bash formatting with shfmt..."
    if command -v shfmt >/dev/null 2>&1; then
        if ! shfmt -i 2 -d $bash_files; then
            echo "‚ùå Bash files need formatting. Run: shfmt -i 2 -w scripts/"
            exit 1
        fi
    fi
fi

echo "‚úÖ All formatting and style checks passed!"
exit 0